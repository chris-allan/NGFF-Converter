# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [ macos-latest, windows-latest ]
    name: package
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
    - if: ${{ matrix.os == 'macos-latest' }}
      name: Install bundler, download blosc, and install Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        brew install dylibbundler
        curl -J -O -k -L 'https://github.com/glencoesoftware/c-blosc-macos-x86_64/releases/download/20220919/libblosc.dylib'

        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        echo "Keychain created"
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        echo "Keychain set"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        echo "Keychain unlocked"

        # import certificate to keychain
        ls -al $CERTIFICATE_PATH
        md5 $CERTIFICATE_PATH
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        echo "Key imported"
        security list-keychain -d user -s $KEYCHAIN_PATH
        echo "Key listed"

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

        # make keychain path available to subsequent tasks
        echo "KEYCHAIN_PATH=${KEYCHAIN_PATH}" >> $GITHUB_ENV
    - if: ${{ matrix.os == 'windows-latest' }}
      name: Download blosc
      run: |
        c:\msys64\usr\bin\wget.exe 'https://github.com/glencoesoftware/c-blosc-windows-x86_64/releases/download/20220919/blosc.dll'
    - name: Run jpackage with Gradle
      uses: gradle/gradle-build-action@v2
      env:
        MAC_SIGNING_KEY_USER_NAME: ${{ secrets.MAC_SIGNING_KEY_USER_NAME }}
      with:
        arguments: jpackage
    - if: ${{ matrix.os == 'macos-latest' }}
      name: Upload Mac pkg
      uses: actions/upload-artifact@v2
      with:
        name: macos-package
        path: ./build/jpackage/*.pkg
        if-no-files-found: error
        retention-days: 3
    - if: ${{ matrix.os == 'windows-latest' }}
      name: Upload Windows MSI
      uses: actions/upload-artifact@v2
      with:
        name: windows-package
        path: ./build/jpackage/*.msi
        if-no-files-found: error
        retention-days: 3
  upload:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    if: startswith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: List artifacts
        run: ls -R
      - name: Create release draft
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.msi
            *.pkg
          draft: true
          fail_on_unmatched_files: true
